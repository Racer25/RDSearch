global.__base = __dirname + '/../../';

//Modules
var http = require('http');
var fs = require('fs');
var CronJob = require('cron').CronJob;
var NcbiApi = require('ncbi-entrez-api');
var async = require("async");
var xml2js = require("xml2js");

//My modules
var RareDisease = require("../model/RareDisease.js");
var TextualInformation = require("../model/TextualInformation.js");
var RareDisease_Year = require("../model/RareDisease_Year.js");
var MostCitedPublication = require("../model/MostCitedPublication.js");
var RareDisease_MostCitedPublication = require("../model/RareDisease_MostCitedPublication.js");

var ConnectionProvider=require("../dao/ConnectionProvider.js");
var OtherDao = require("../dao/OtherDao.js");
var TextualInformationDao = require("../dao/TextualInformationDao.js");
var RareDiseaseDao = require("../dao/RareDiseaseDao.js");
var RareDisease_YearDao = require("../dao/RareDisease_YearDao.js");
var YearDao = require("../dao/YearDao.js");
var MostCitedPublicationDao = require("../dao/MostCitedPublicationDao.js");
var RareDisease_MostCitedPublicationDao = require("../dao/RareDisease_MostCitedPublicationDao.js");

//Create the job
var job = new CronJob(
    {
        cronTime: '00 14 15 * * 1-7',
        onTick: function() 
        {
            //Runs every weekday (Monday through Friday)
            //at 16:24:00 AM. It does not run on Saturday
            //or Sunday.
            download("http://www.orphadata.org/data/export/en_product1.json",__base+"download/en_product1.json", updateDB);
        },
        start: true,
        timeZone: 'America/Montreal'
    });

//Launch the Job!
job.start();


var updateDB = function()
{
    //First, we check the update date of orphanet file
    checkLastUpdateDate(updateRareDiseaseWorkflow, noUpdateRareDiseaseWorkflow);
};

var updateRareDiseaseWorkflow = function()
{
    var diseases=[];
    var textualinformations=[];
    getInformationFromJSON(diseases, textualinformations);

    console.info("Updating of rarediseaseTable start...");
    async.each(
        diseases,
        function(disease, next)
        {
            RareDiseaseDao.addOrModifyRareDisease(disease, next);
        },
        function(err)
        {
            if(err)
            {
                console.error("Error occured updating rarediseases Table");
            }
            else
            {
                console.info("Update of rarediseaseTable finished at "+(new Date()).toISOString());
                console.info("Updating of TextualInformation start...");
                async.each(
                    textualinformations,
                    function(textualinformation, next)
                    {
                        console.log();
                        TextualInformationDao.addOrModifyTextualInformationFromOrphanet(textualinformation, next);
                    },
                    function(err)
                    {
                        if(err)
                        {
                            console.error("Error occured updating TextualInformation Table");
                            noUpdateRareDiseaseWorkflow();
                        }
                        else
                        {
                            console.info("Update of TextualInformation finished at "+(new Date()).toISOString());
                            noUpdateRareDiseaseWorkflow();
                        }
                    }
                );
            }
        }
    );
};

var noUpdateRareDiseaseWorkflow = function()
{
    //We get diseases from DB
    RareDiseaseDao.getRareDiseases(
        //Called when we received all diseases in results
        function(results)
        {
            console.info("Update of DB start...");
            async.eachLimit(
                results, 
                3,
                //Called for each disease
                function (rareDisease, next) {
                    setTimeout(
                        //Called 3 times per second
                        function() 
                        {
                            console.log("Searching publications for:{"+rareDisease.orphanetID+", "+rareDisease.name+"}");
                            getIdsFromSearch(
                                rareDisease.name, 
                                rareDisease.orphanetID, 
                                //Called when esearch finished and ids acquired
                                function(idlist, orphanetID)
                                {
                                    if(idlist == undefined){return;}
                                    console.log("Scanning publications for:{"+rareDisease.orphanetID+", "+rareDisease.name+"}");

                                    //First, we check the 50 most cited articles for this disease
                                    var rareDisease_mostCitedPublications = [];
                                    async.eachLimit(
                                        idlist,
                                        1,
                                        //Called for each publication
                                        function (id, next2)
                                        {
                                            getNumberPublicationsThatCiteGivingPublication(
                                                id,
                                                function(timesCited)
                                                {
                                                    if(timesCited == undefined){return;}
                                                    var pubWithTimesCited=Object.create(RareDisease_MostCitedPublication);
                                                    pubWithTimesCited.init(id, orphanetID, timesCited);
                                                    rareDisease_mostCitedPublications.push(pubWithTimesCited);
                                                    next2();
                                                }
                                            );
                                        },
                                        function (err)
                                        {
                                            if(err)
                                            {
                                                console.error("Error occured recovering timesCited from NCBI Entrez for: "+rareDisease.orphanetID);
                                            }
                                            else
                                            {
                                                console.info("TimesCited recovered from NCBI Entrez for: "+rareDisease.orphanetID);

                                                //Ordering publications with timesCited
                                                rareDisease_mostCitedPublications=rareDisease_mostCitedPublications.sort(function(a, b){a.timesCited-b.timesCited});

                                                //Top 50 of mostCitedPublications
                                                rareDisease_mostCitedPublications=rareDisease_mostCitedPublications.filter(function(currentValue, index,arr){return index < 50});

                                                async.eachLimit(
                                                    rareDisease_mostCitedPublications,
                                                    10,
                                                    function(rareDisease_mostCitedPublication, next3)
                                                    {
                                                        getPublication(rareDisease_mostCitedPublication.idPublication,
                                                            function(publication)
                                                            {
                                                                if(publication == undefined){return;}
                                                                MostCitedPublicationDao.addPublication(publication,
                                                                    function()
                                                                    {
                                                                        RareDisease_MostCitedPublicationDao.addRareDisease_MostCitedPublication(
                                                                            rareDisease_mostCitedPublication,
                                                                            function()
                                                                            {
                                                                                //console.log("RareDisease_MostCitedPublication stocked in DB");
                                                                                next3();
                                                                            }
                                                                        );
                                                                    }
                                                                );
                                                            }
                                                        );
                                                    },
                                                    function(err)
                                                    {
                                                        if(err)
                                                        {
                                                            console.error("Error occured updating timesCited");
                                                        }
                                                        else
                                                        {
                                                            console.info("Updating timesCited finished for: "+rareDisease.orphanetID);
                                                        }
                                                    }
                                                );
                                            }
                                        }
                                    );
                                    //After, we check the numebrOfPublication per year in Pubmed
                                    /*
                                    getRareDisease_YearFromIds(
                                        idlist, 
                                        orphanetID,
                                        function(rareDisease_YearList)
                                        {
                                            async.eachLimit(
                                                rareDisease_YearList, 
                                                10,
                                                //Called for each rareDisease_Year
                                                function(rareDisease_Year, next2)
                                                {
                                                    var year=
                                                        {
                                                            year:rareDisease_Year.year,
                                                            numberOfPublications:0
                                                        };
                                                    YearDao.addOrModifyYear(
                                                        year,
                                                        function()
                                                        {
                                                            RareDisease_YearDao.addOrModifyRareDisease_Year(rareDisease_Year, next2);
                                                        }
                                                    );
                                                }
                                                ,
                                                function(err)
                                                {
                                                    if(err)
                                                    {
                                                        console.error("Error occured updating is_studied_during");
                                                    }
                                                    else
                                                    {
                                                        //console.info("Update of numberOfPublications finished");
                                                    }
                                                }
                                            );
                                        }
                                    );*/
                                    next();
                                }
                            );
                        }, 
                        1000);
                }, 
                function (err) 
                {
                    if(err)
                    {
                        console.error("Error occured updating numberOfPublications");
                    }
                    else
                    {
                        console.info("Update of numberOfPublications finished at "+(new Date()).toISOString());
                    }
                });
        }
    );
};


var checkLastUpdateDate =  function(callbackUpdate, callbackNoUpdate)
{
    var json = require(__base+"download/en_product1.json");
    var lastUpdateDateFromJSON=json.JDBOR[0].date.substring(0, 10);

    //Connection to DB
    ConnectionProvider.getConnection();
    ConnectionProvider.connect();

    OtherDao.checkLastUpdateDate(lastUpdateDateFromJSON,callbackUpdate,callbackNoUpdate);
};

var getInformationFromJSON = function(diseases, textualinformations)
{
    var json = require(__base+"download/en_product1.json");

    var disorderList = json.JDBOR[0].DisorderList[0].Disorder;

    for(var m =0; m<disorderList.length; m++)
    {
        var disorder=disorderList[m];

        var disease = Object.create(RareDisease);

        var orphanetID= disorder.OrphaNumber;
        var name= disorder.Name[0].label;
        var sourceName="Orphanet";
        var sourceLink=disorder.ExpertLink[0].link;

        for(var i = 0; i < disorder.TextualInformationList.length; i++)
        {
            if(disorder.TextualInformationList[i].count != "0")
            {
                for(var j = 0; j < disorder.TextualInformationList[i].TextualInformation.length; j++)
                {
                    for(var k = 0; k < disorder.TextualInformationList[i].TextualInformation[j].TextSectionList.length; k++)
                    {
                        if(disorder.TextualInformationList[i].TextualInformation[j].TextSectionList[k].count != "0")
                        {
                            var textSection=disorder.TextualInformationList[i].TextualInformation[j].TextSectionList[k].TextSection;
                            for(var l = 0; l < textSection.length; l++)
                            {
                                var textualInformation=Object.create(TextualInformation);
                                var title=textSection[l].TextSectionType[0].Name[0].label;
                                var content=textSection[l].Contents;
                                var id=textSection[l].id;

                                //Init object
                                textualInformation.init(id, title, content, orphanetID, sourceName, sourceLink);

                                textualinformations.push(textualInformation);
                            }
                        }

                    }
                }   
            }

        }

        disease.init(orphanetID, name);
        diseases.push(disease);
    }
};

var getIdsFromSearch = function(searchString, orphanetID, callback)
{
    var pubmed = NcbiApi.dbFactory(NcbiApi.DB.PUBMED)
    pubmed.esearch(
        {
            term: searchString+" AND"+" hasabstract[text]"+" AND"+" Humans[Mesh]",
            retmode: "json",
            retmax:100000
        }, 
        function(err, response, data) 
        {
            if(err)
            {
                callback(undefined, undefined);
            }
            if(data != undefined && data.esearchresult != undefined)
            {
                var idlist= data.esearchresult.idlist;
                callback(idlist, orphanetID);
            }
        }
    );
};

var getRareDisease_YearFromIds = function(ids, orphanetID, callback)
{
    var pubmed = NcbiApi.dbFactory(NcbiApi.DB.PUBMED)
    pubmed.esummary(
        {
            ids: ids,
            retmode: "json"
        }, 
        function(err, response, data) 
        {
            if(err)
            {
                callback(undefined);
            }
            if(data != undefined && data.result != undefined)
            {
                var idslist= data.result.uids;
                var rareDisease_YearList=[];

                for(var i = 0; i < idslist.length; i++)
                {
                    var yearString=data.result[idslist[i]].pubdate.substring(0,4);

                    var rareDisease_YearIndex=rareDisease_YearList.findIndex(function(currentValue, index, arr){return currentValue.year == yearString});

                    //Is this date already in the array?
                    if(rareDisease_YearIndex != -1)
                    {
                        rareDisease_YearList[rareDisease_YearIndex].numberOfPublications++;
                    }
                    else
                    {
                        //Create rareDisease_Year object
                        var rareDisease_Year=Object.create(RareDisease_Year);
                        rareDisease_Year.init(
                            yearString,
                            orphanetID,
                            1
                        );
                        //Ajout à la collection
                        rareDisease_YearList.push(rareDisease_Year);
                    }
                }
                callback(rareDisease_YearList);
            }
        }
    );
};

var getNumberPublicationsThatCiteGivingPublication = function(id, callback)
{
    //https://eutils.ncbi.nlm.nih.gov/entrez/eutils/elink.fcgi?dbfrom=pubmed&linkname=pubmed_pubmed_citedin&id=24091329&retmode=json

    var pubmed = NcbiApi.dbFactory(NcbiApi.DB.PUBMED);
    pubmed.elink(
        {
            dbFrom: "pubmed",
            linkname: "pubmed_pubmed_citedin",
            retmode: "json",
            id: id
        },
        function(err, response, data)
        {
            if(err)
            {
                callback(undefined);
            }
            if(data != undefined && data.linksets != undefined)
            {
                if(data.linksets[0].linksetdbs != undefined)
                {
                    var links= data.linksets[0].linksetdbs[0].links;
                    callback(links.length);
                }
                else
                {
                    callback(0);
                }
            }
        }
    );
};

var getPublication = function(id, callback)
{
    //https://eutils.ncbi.nlm.nih.gov/entrez/eutils/elink.fcgi?dbfrom=pubmed&linkname=pubmed_pubmed_citedin&id=24091329&retmode=json

    var pubmed = NcbiApi.dbFactory(NcbiApi.DB.PUBMED);
    pubmed.efetch(
        {
            db: "pubmed",
            retmode: "xml",
            id: id
        },
        function(err, response, data)
        {
            if(err)
            {
                callback(undefined);
            }

            //Conversion vers JS Object dans objectFromXml
            var objectFromXml="";
            var parser = new xml2js.Parser();
            parser.parseString
            (
                data,
                function (err, result)
                {
                    objectFromXml = result;
                }
            );

            if(objectFromXml == undefined || objectFromXml.PubmedArticleSet == undefined){return;}

            //Article Title search
            var title=objectFromXml.PubmedArticleSet.PubmedArticle[0].MedlineCitation[0].Article[0].ArticleTitle[0];

            //Abstract Search
            var abstract="";
            var objectAbstract=objectFromXml.PubmedArticleSet.PubmedArticle[0].MedlineCitation[0].Article[0].Abstract[0].AbstractText;
            if(objectAbstract.length==1)
            {
                abstract=objectAbstract[0];
            }
            else
            {
                for(var j=0; j< objectAbstract.length; j++)
                {
                    if(objectAbstract[j].$ != undefined)
                    {
                        abstract+=objectAbstract[j].$.Label+" \n";
                        abstract+=objectAbstract[j]._+" \n";
                    }
                    else
                    {
                        abstract+=objectAbstract[j]+" \n";
                    }
                }
            }

            //Authors Search
            var authors=[];
            objectAuthors=objectFromXml.PubmedArticleSet.PubmedArticle[0].MedlineCitation[0].Article[0].AuthorList[0].Author;
            for(var j=0; j< objectAuthors.length; j++)
            {
                var author="";
                if(objectAuthors[j].LastName != undefined && objectAuthors[j].ForeName != undefined)
                {
                    var author=objectAuthors[j].LastName[0]+" "+objectAuthors[j].ForeName[0];
                }
                else if(objectAuthors[j].CollectiveName != undefined)
                {
                    var author=objectAuthors[j].CollectiveName[0];
                }
                authors.push(author);
            }

            //DOI Search
            var doi="";
            var objectDOI=objectFromXml.PubmedArticleSet.PubmedArticle[0].PubmedData[0].ArticleIdList[0].ArticleId;
            for(var j=0; j< objectDOI.length; j++)
            {
                var idObj=objectDOI[j];
                if(idObj.$.IdType==="doi")
                {
                    doi=idObj._;
                }
            }

            //Date Search
            var date="";
            var objectDate=objectFromXml.PubmedArticleSet.PubmedArticle[0].MedlineCitation[0].DateRevised[0];
            date=new Date(objectDate.Year+"-"+objectDate.Month+"-"+objectDate.Day+"T00:00:00");

            //Création de l'objet publication
            var publication=Object.create(MostCitedPublication);
            publication.init(
                id,
                title,
                abstract,
                authors,
                doi,
                date,
                ""
            );
            callback(publication);
        }
    );
};

var download = function(url, dest, callback) 
{
    console.info("Download of file "+dest+" start...");
    var file = fs.createWriteStream(dest);
    var request = http.get(url, function(response) {
        response.pipe(file);
        file.on('finish', function() {
            console.info("Download finished");
            file.close(callback);  // close() is async, call cb after close completes.
        });
    }).on('error', function(err) { 
        // Handle errors
        fs.unlink(dest); // Delete the file async. (But we don't check the result)
        if (callback) callback(err.message);
    });
};

exports.updateDB=updateDB;
exports.updateRareDiseaseWorkflow=updateRareDiseaseWorkflow;
exports.noUpdateRareDiseaseWorkflow=noUpdateRareDiseaseWorkflow;
exports.checkLastUpdateDate=checkLastUpdateDate;
exports.getInformationFromJSON=getInformationFromJSON;
exports.getIdsFromSearch=getIdsFromSearch;
exports.getRareDisease_YearFromIds=getRareDisease_YearFromIds;
exports.getNumberPublicationsThatCiteGivingPublication=getNumberPublicationsThatCiteGivingPublication;
exports.getPublication=getPublication;
exports.download=download;