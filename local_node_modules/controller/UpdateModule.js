global.__base = __dirname + '/../../';

//Modules
var http = require('http');
var fs = require('fs');
var CronJob = require('cron').CronJob;
var async = require("async");

//My modules
var NCBIAPIModule = require("../controller/NCBIAPIModule");

var RareDisease = require("../model/RareDisease.js");
var TextualInformation = require("../model/TextualInformation.js");
var RareDisease_Year = require("../model/RareDisease_Year.js");
var MostCitedPublication = require("../model/MostCitedPublication.js");
var RareDisease_MostCitedPublication = require("../model/RareDisease_MostCitedPublication.js");

var ConnectionProvider=require("../dao/ConnectionProvider.js");
var OtherDao = require("../dao/OtherDao.js");
var TextualInformationDao = require("../dao/TextualInformationDao.js");
var RareDiseaseDao = require("../dao/RareDiseaseDao.js");
var RareDisease_YearDao = require("../dao/RareDisease_YearDao.js");
var YearDao = require("../dao/YearDao.js");
var MostCitedPublicationDao = require("../dao/MostCitedPublicationDao.js");
var RareDisease_MostCitedPublicationDao = require("../dao/RareDisease_MostCitedPublicationDao.js");

var updateElementsLinkedToDisease = function(rareDisease, callback)
{
    console.log("callNCBIAPI getIdsFromSearch, disease: "+rareDisease.orphanetID);
    NCBIAPIModule.callNCBIAPI(
        NCBIAPIModule.getIdsFromSearch,
        [
            rareDisease.name,
            rareDisease.orphanetID,
            //Called when esearch finished and ids acquired
            function(idlist, orphanetID)
            {
                if(idlist != undefined && orphanetID != undefined)
                {
                    //First, we check the 3 most cited articles for this disease
                    var rareDisease_mostCitedPublications = [];
                    console.log("callNCBIAPI getNumberPublicationsThatCiteGivingPublications, disease: " + orphanetID);
                    NCBIAPIModule.callNCBIAPI(
                        NCBIAPIModule.getNumberPublicationsThatCiteGivingPublications,
                        [
                            idlist,
                            function (timesCitedList) {
                                if (timesCitedList != undefined) {
                                    console.info(timesCitedList.length + " TimesCited recovered for disease " + orphanetID +
                                        " and publications from " + idlist[0] + " to " + idlist[idlist.length - 1]);
                                    //if(timesCited == undefined){return;}
                                    for (let i = 0; i < timesCitedList.length; i++) {
                                        var pubWithTimesCited = Object.create(RareDisease_MostCitedPublication);
                                        pubWithTimesCited.init(idlist[i], orphanetID, timesCitedList[i]);
                                        //Dynamic Ordering publications with timesCited and Top 3 of mostCitedPublications
                                        rareDisease_mostCitedPublications = dynamicSortingArray(pubWithTimesCited, rareDisease_mostCitedPublications, 3);
                                    }

                                    console.log(rareDisease_mostCitedPublications);
                                    console.info("TimesCited recovered from NCBI Entrez for: " + rareDisease.orphanetID);
                                    async.each(
                                        rareDisease_mostCitedPublications,
                                        function (rareDisease_mostCitedPublication, next3) {
                                            NCBIAPIModule.callNCBIAPI(
                                                NCBIAPIModule.getPublication,
                                                [
                                                    rareDisease_mostCitedPublication.idPublication,
                                                    function (publication) {
                                                        if (publication != undefined) {
                                                            console.info("Recovering publication details for publication: " + publication.idPublication);
                                                            //if(publication == undefined){return;}
                                                            MostCitedPublicationDao.addPublication(publication,
                                                                function () {
                                                                    RareDisease_MostCitedPublicationDao.addRareDisease_MostCitedPublication(
                                                                        rareDisease_mostCitedPublication,
                                                                        function () {
                                                                            console.log("RareDisease_MostCitedPublication stocked in DB: disease "+rareDisease_mostCitedPublication.orphanetID+
                                                                                " and publication "+rareDisease_mostCitedPublication.idPublication);
                                                                            next3();
                                                                        }
                                                                    );
                                                                }
                                                            );
                                                        }
                                                    }
                                                ]
                                            );
                                        },
                                        function (err)
                                        {
                                            if (err)
                                            {
                                                console.error("Error occured updating timesCited");
                                            }
                                            else
                                            {
                                                console.info("Updating timesCited and mostCitedPublication finished for: " + rareDisease.orphanetID);
                                                callback();
                                            }
                                        }
                                    );
                                }
                            }
                        ]
                    );

                    //After, we check the numberOfPublication per year in Pubmed
                    NCBIAPIModule.callNCBIAPI(
                        NCBIAPIModule.getRareDisease_YearFromIds,
                        [
                            idlist,
                            orphanetID,
                            function (rareDisease_YearList) {
                                if (rareDisease_YearList != undefined) {
                                    console.log("Number of Publication per year recovered for " + orphanetID);
                                    async.each
                                    (
                                        rareDisease_YearList,
                                        //Called for each rareDisease_Year
                                        function (rareDisease_Year, next2) {
                                            var year =
                                                {
                                                    year: rareDisease_Year.year,
                                                    numberOfPublications: 0
                                                };
                                            YearDao.addOrModifyYear(
                                                year,
                                                function () {
                                                    RareDisease_YearDao.addOrModifyRareDisease_Year(rareDisease_Year, next2);
                                                }
                                            );
                                        }
                                        ,
                                        function (err) {
                                            if (err)
                                            {
                                                console.error("Error occured updating is_studied_during");
                                            }
                                            else
                                            {
                                                console.info("Update of numberOfPublications finished for " + orphanetID);
                                            }
                                        }
                                    );
                                }
                            }
                        ]
                    );
                }
            }
        ]
    );
};

//Create the job
var job = new CronJob(
    {
        cronTime: '00 14 15 * * 1-7',
        onTick: function()
        {
            //Runs every weekday (Monday through Friday)
            //at 16:24:00 AM. It does not run on Saturday
            //or Sunday.
            download("http://www.orphadata.org/data/export/en_product1.json",__base+"download/en_product1.json", updateDB);
        },
        start: true,
        timeZone: 'America/Montreal'
    });

//Launch the Job!
job.start();


var updateDB = function()
{
    //First, we check the update date of orphanet file
    checkLastUpdateDate(updateRareDiseaseWorkflow, noUpdateRareDiseaseWorkflow);
};

var updateRareDiseaseWorkflow = function()
{
    var diseases=[];
    var textualinformations=[];
    getInformationFromJSON(diseases, textualinformations);

    console.info("Updating of rarediseaseTable start...");
    async.each(
        diseases,
        function(disease, next)
        {
            RareDiseaseDao.addOrModifyRareDisease(disease, next);
        },
        function(err)
        {
            if(err)
            {
                console.error("Error occured updating rarediseases Table");
            }
            else
            {
                console.info("Update of rarediseaseTable finished at "+(new Date()).toISOString());
                console.info("Updating of TextualInformation start...");
                async.each(
                    textualinformations,
                    function(textualinformation, next)
                    {
                        TextualInformationDao.addOrModifyTextualInformationFromOrphanet(textualinformation, next);
                    },
                    function(err)
                    {
                        if(err)
                        {
                            console.error("Error occured updating TextualInformation Table");
                            noUpdateRareDiseaseWorkflow();
                        }
                        else
                        {
                            console.info("Update of TextualInformation finished at "+(new Date()).toISOString());
                            noUpdateRareDiseaseWorkflow();
                        }
                    }
                );
            }
        }
    );
};

var noUpdateRareDiseaseWorkflow = function()
{
    //We get diseases from DB
    RareDiseaseDao.getRareDiseases(
        //Called when we received all diseases in results
        function(results)
        {
            console.info("Update of DB start...");
            //var results=results.filter(function(currentValue, index, arr){return index < 10});
            async.each
            (
                results,
                function(rareDisease, next)
                {
                    updateElementsLinkedToDisease(rareDisease, next);
                },
                function(err)
                {
                    if(err)
                    {
                        console.error("Error in Update :)");
                    }
                    else
                    {
                        console.info("Update Finished :)");
                    }
                }
            );
        }
    );
};


var checkLastUpdateDate =  function(callbackUpdate, callbackNoUpdate)
{
    var json = require(__base+"download/en_product1.json");
    var lastUpdateDateFromJSON=json.JDBOR[0].date.substring(0, 10);

    //Connection to DB
    ConnectionProvider.getConnection();
    ConnectionProvider.connect();

    OtherDao.checkLastUpdateDate(lastUpdateDateFromJSON,callbackUpdate,callbackNoUpdate);
};

var getInformationFromJSON = function(diseases, textualinformations)
{
    var json = require(__base+"download/en_product1.json");

    var disorderList = json.JDBOR[0].DisorderList[0].Disorder;

    for(var m =0; m<disorderList.length; m++)
    {
        var disorder=disorderList[m];

        var disease = Object.create(RareDisease);

        var orphanetID= disorder.OrphaNumber;
        var name= disorder.Name[0].label;
        var sourceName="Orphanet";
        var sourceLink=disorder.ExpertLink[0].link;

        for(var i = 0; i < disorder.TextualInformationList.length; i++)
        {
            if(disorder.TextualInformationList[i].count != "0")
            {
                for(var j = 0; j < disorder.TextualInformationList[i].TextualInformation.length; j++)
                {
                    for(var k = 0; k < disorder.TextualInformationList[i].TextualInformation[j].TextSectionList.length; k++)
                    {
                        if(disorder.TextualInformationList[i].TextualInformation[j].TextSectionList[k].count != "0")
                        {
                            var textSection=disorder.TextualInformationList[i].TextualInformation[j].TextSectionList[k].TextSection;
                            for(var l = 0; l < textSection.length; l++)
                            {
                                var textualInformation=Object.create(TextualInformation);
                                var title=textSection[l].TextSectionType[0].Name[0].label;
                                var content=textSection[l].Contents;
                                var id=textSection[l].id;

                                //Init object
                                textualInformation.init(id, title, content, orphanetID, sourceName, sourceLink);

                                textualinformations.push(textualInformation);
                            }
                        }

                    }
                }
            }

        }

        disease.init(orphanetID, name);
        diseases.push(disease);
    }
};

var download = function(url, dest, callback)
{
    console.info("Download of file "+dest+" start...");
    var file = fs.createWriteStream(dest);
    var request = http.get(url, function(response) {
        response.pipe(file);
        file.on('finish', function() {
            console.info("Download finished");
            file.close(callback);  // close() is async, call cb after close completes.
        });
    }).on('error', function(err) {
        // Handle errors
        fs.unlink(dest); // Delete the file async. (But we don't check the result)
        if (callback) callback(err.message);
    });
};

var dynamicSortingArray = function(val, array, length)
{
    let index=0;
    for(let i = 0; i < array.length; i++)
    {
        if(array[i].timesCited > val.timesCited)
        {
            index++;
        }
    }
    array.splice(index, 0, val);
    if(array.length > length)
    {
        array.pop();
    }
    return array;
};

exports.updateDB=updateDB;
exports.updateRareDiseaseWorkflow=updateRareDiseaseWorkflow;
exports.noUpdateRareDiseaseWorkflow=noUpdateRareDiseaseWorkflow;
exports.checkLastUpdateDate=checkLastUpdateDate;
exports.getInformationFromJSON=getInformationFromJSON;
exports.download=download;
exports.dynamicSortingArray=dynamicSortingArray;