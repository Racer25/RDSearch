var http = require('http');
var fs = require('fs');
var RareDisease = require("../model/RareDisease.js");

var ConnectionProvider=require("../dao/ConnectionProvider.js");
var OtherDao = require("../dao/OtherDao.js");
var RareDiseaseDao = require("../dao/RareDiseaseDao.js");

var CronJob = require('cron').CronJob;
var job = new CronJob(
    {
  cronTime: '00 30 23 * * 1-5',
  onTick: function() {
    /*
     * Runs every weekday (Monday through Friday)
     * at 11:30:00 AM. It does not run on Saturday
     * or Sunday.
     */
      download("http://www.orphadata.org/data/export/en_product1.json",__base+"download/en_product1.json", checkLastUpdateDate);
  },
  start: true,
  timeZone: 'America/Los_Angeles'
});

//Launch the Job!
job.start();

var checkLastUpdateDate =  function()
{
    var json = require(__base+"download/en_product1.json");
    var lastUpdateDateFromJSON=json.JDBOR[0].date.substring(0, 10);
    
    //Connection to DB
    ConnectionProvider.getConnection();
    ConnectionProvider.connect();
    
    OtherDao.checkLastUpdateDate(lastUpdateDateFromJSON,
                                 //Anonymous function called if there's an update
                                 function(){
        var diseases=getDiseasesListFromJSON();
        RareDiseaseDao.addOrModifyRareDiseases(diseases);
        //ConnectionProvider.end();//buggy...
    },
                                 //Anonymous function called if there's no update
                                 function(){
        //ConnectionProvider.end();//buggy...
    });
}

var getDiseasesListFromJSON = function()
{
    var json = require(__base+"download/en_product1.json");
    
    var disorderList = json.JDBOR[0].DisorderList[0].Disorder;
    
    var diseases=[];
    for(var i =0; i<disorderList.length; i++)
    {
        console.log("i="+i)
        var disorder=disorderList[i];
        
        var disease = Object.create(RareDisease);
        
        var orphanetID= disorder.OrphaNumber;
        var name= disorder.Name[0].label;
        //console.log(Object.keys(disorder.TextualInformationList[0]));
        var description="";
        if(disorder.TextualInformationList[0].TextualInformation != undefined && 
          disorder.TextualInformationList[0].TextualInformation != null)
        {
            if(disorder.TextualInformationList[0].TextualInformation[0].TextSectionList[0].TextSection != undefined && 
          disorder.TextualInformationList[0].TextualInformation[0].TextSectionList[0].TextSection != null)
            {
                description= disorder.TextualInformationList[0].TextualInformation[0].TextSectionList[0].TextSection[0].Contents;
            }
        }
        
        
        disease.init(orphanetID, name, description);
        diseases.push(disease);
    }
    return diseases;
}

var download = function(url, dest, callback) 
{
    console.log("download start...");
  var file = fs.createWriteStream(dest);
  var request = http.get(url, function(response) {
    response.pipe(file);
    file.on('finish', function() {
    console.log("download finished");
      file.close(callback);  // close() is async, call cb after close completes.
    });
  }).on('error', function(err) { 
        // Handle errors
        fs.unlink(dest); // Delete the file async. (But we don't check the result)
        if (cb) cb(err.message);
  });
};