var dictionary=[];

var Natural = require('natural');

var giveSymptomsWithOccurrence = function(text, callback)
{
    //First, we construct the disctionary by reading a file of symptoms
    getDictionary
    (
        function(dictionary)
        {
            /////////////////////
            //TEXT PRE-PROCESSING
            /////////////////////

            //To Lower case
            text = text.toLowerCase();

            //We tokenize our string
            var tokenizer = new Natural.WordTokenizer();
            var tokens = tokenizer.tokenize(text);

            //Deleting stop words (from https://github.com/6/stopwords-json)
            var stopWords = require("../../download/stopWords_en.json");
            tokens = tokens.filter(function(currentValue, index, arr) {return stopWords.indexOf(currentValue) == -1;});

            //Stemming
            for(var i = 0; i < tokens.length; i++)
            {
                tokens[i] = Natural.PorterStemmer.stem(tokens[i]);
            }


            //Computing weight for symptoms
            var symptomsWithOccurence = [];

            for(var i = 0; i < tokens.length; i++)
            {
                var dictionaryWordAlreadyUsed = false;
                for(var j = 0; j < dictionary.length && !dictionaryWordAlreadyUsed; j++)
                {
                    if(tokens[i] === dictionary[j])
                    {
                        //Check if symptom already here and if true, give index i
                        var k=0;
                        var symptomAlreadyUsed=false;
                        while(!symptomAlreadyUsed && k < symptomsWithOccurence.length)
                        {
                            if(symptomsWithOccurence[k].name === tokens[i])
                            {
                                symptomAlreadyUsed = true;
                            }
                            else
                            {
                                k++;
                            }
                        }

                        //Increment counter or Add to array
                        if(symptomAlreadyUsed)
                        {
                            symptomsWithOccurence[k].size++;
                        }
                        else
                        {
                            symptomsWithOccurence.push({name: tokens[i], size: 1});
                        }
                        dictionaryWordAlreadyUsed = true;
                    }
                }
            }

            callback(symptomsWithOccurence);
        }
    );
};

var getDictionary = function(callback)
{
    if(dictionary.length == 0)
    {
        let dictionary = [];

        var lineReader = require('readline').createInterface(
            {
                input: require('fs').createReadStream(__base+'download/hp.obo')
            }
        );

        lineReader.on('line', function (line)
        {
            if(line != "" && line != "\n")
            {
                var symptom="";
                if(line.substring(0, 6) == "name: " && line != "name: All" && line != "name: All\n")
                {
                    symptom=line.substring(6).toLowerCase();
                }
                else if(line.length>10 && line.substring(0, 10) == "synonym: \"")
                {
                    var index=10;
                    var char=line.charAt(index);
                    do
                    {
                        symptom += char;
                        index++;
                        char=line.charAt(index);
                    }while(char !="\"");//Char different from "
                }

                //We tokenize our symptom
                var tokenizer = new Natural.WordTokenizer();
                var tokens = tokenizer.tokenize(symptom);

                //Finally we add in dictionary
                for(var i = 0; i < tokens.length; i++)
                {
                    dictionary.push(tokens[i].toLowerCase());
                }

            }

        });

        lineReader.on("close", function()
        {
            callback(dictionary);
        }
        );
    }
    else
    {
        callback(dictionary);
    }
};

exports.giveSymptomsWithOccurrence=giveSymptomsWithOccurrence;

//giveSymptomsWithOccurence("the achalasia is bad", function(symptomsWithOccurence){console.log(symptomsWithOccurence)});