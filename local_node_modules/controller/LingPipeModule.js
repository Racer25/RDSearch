//This function return in response an array of symptoms with corresponding weight
var lingPipeFunction= function(publications, res)
{
    var lingPipeProcess = require('child_process').spawn('java', ['-jar', __base+"jars/lingPipe.jar",'anArgument']);

    var symptomsWithSize=[];

    //Work in progress (called several times, for each symptoms detected)
    lingPipeProcess.stdout.on('data', function(data) 
    {
        console.log("Nombre de symptomes identifiés: "+ symptomsWithSize.length);
        
        var symptom = data.toString();
        
        //Check if symtom already here and if true, give index i
        var i=0;
        var symptomAlreadyUsed=false;
        while(!symptomAlreadyUsed && i < symptomsWithSize.length)
        {
            if(symptomsWithSize[i].text === symptom)
            {
                symptomAlreadyUsed = true;
            }
            else
            {
                i++;
            }
        }
        
        //Increment counter or Add to array
        if(symptomAlreadyUsed)
        {
            symptomsWithSize[i].size++;
        }
        else
        {
            symptomsWithSize.push({text: symptom, size: 1});
        }
    });

    lingPipeProcess.stderr.on("data", function (data) {
        console.log("ERREUR, message reçu: " + data.toString());
        res.json(symptomsWithSize);
    });
    
    //When it's finished
    lingPipeProcess.on('exit', function() {
        //Exp to strenghten influence of big terms
        for(var i = 0; i < symptomsWithSize.length; i++)
        {
            symptomsWithSize[i].size=Math.exp(symptomsWithSize[i].size);
        }
        
        //Find Min and Max for Normalization
        var max = Math.max.apply(Math,symptomsWithSize.map(function(o){return o.size;}));
        var min = Math.min.apply(Math,symptomsWithSize.map(function(o){return o.size;}));
        
        //Normalization
        for(var i = 0; i < symptomsWithSize.length; i++)
        {
            symptomsWithSize[i].size=15+(50-15)*(symptomsWithSize[i].size-min)/(max-min);
        }
        console.log("Fin de la recherche de symptomes");
        res.json(symptomsWithSize);
    });

    //We send publications JSON via STDIN
    lingPipeProcess.stdin.write(JSON.stringify(publications)+"\n");
}

exports.lingPipeFunction=lingPipeFunction;