//This function return in response an array of genes_proteines with corresponding weight
var relationExtractorFunction= function(publications, res)
{
    var relationExtractorProcess = require('child_process').spawn('java', ['-jar', __base+"jars/relationExtractor.jar",'anArgument']);

    var genes_proteinesWithSize=[];

    //Work in progress (called several times, for each genes_proteines detected)
    relationExtractorProcess.stdout.on('data', function(data) 
    {
        console.log("Nombre de genes_proteinees identifiés: "+ genes_proteinesWithSize.length);
        
        var genes_proteine = data.toString();
        console.log("Prot_Gene= "+genes_proteine);
        
        //Check if gene_proteine already here and if true, give index i
        var i=0;
        var genes_proteineAlreadyUsed=false;
        while(!genes_proteineAlreadyUsed && i < genes_proteinesWithSize.length)
        {
            if(genes_proteinesWithSize[i].text === genes_proteine)
            {
                genes_proteineAlreadyUsed = true;
            }
            else
            {
                i++;
            }
        }
        
        //Increment counter or Add to array
        if(genes_proteineAlreadyUsed)
        {
            genes_proteinesWithSize[i].size++;
        }
        else
        {
            genes_proteinesWithSize.push({text: genes_proteine, size: 1});
        }
    });

    relationExtractorProcess.stderr.on("data", function (data) {
        console.log("ERREUR, message reçu: " + data.toString());
        //res.json(genes_proteinesWithSize);
    });
    
    //When it's finished
    relationExtractorProcess.on('exit', function() {
        ///////////////////////////////////////////
        var genes_proteinesWithSizeTest=[];
        for(var i = 0; i < genes_proteinesWithSize.length; i++)
        {
            if(genes_proteinesWithSize[i].size > 10)
            {
               genes_proteinesWithSizeTest.push(genes_proteinesWithSize[i])
            }
        }
        genes_proteinesWithSize=genes_proteinesWithSizeTest;
        //////////////////////////////////////////
        
        
        //Exp to strenghten influence of big terms
        for(var i = 0; i < genes_proteinesWithSize.length; i++)
        {
            genes_proteinesWithSize[i].size=Math.exp(genes_proteinesWithSize[i].size);
        }
        
        //Find Min and Max for Normalization
        var max = Math.max.apply(Math,genes_proteinesWithSize.map(function(o){return o.size;}));
        var min = Math.min.apply(Math,genes_proteinesWithSize.map(function(o){return o.size;}));
        
        //Normalization
        for(var i = 0; i < genes_proteinesWithSize.length; i++)
        {
            genes_proteinesWithSize[i].size=15+(50-15)*(genes_proteinesWithSize[i].size-min)/(max-min);
        }
        console.log("Fin de la recherche de genes_proteinees");
        res.header("Content-Type", "application/json; charset=utf-8");
        res.json(genes_proteinesWithSize);
    });

    //We send publications JSON via STDIN
    console.log(JSON.stringify(publications));
    relationExtractorProcess.stdin.write(JSON.stringify(publications)+"\n");
};

exports.relationExtractorFunction=relationExtractorFunction;